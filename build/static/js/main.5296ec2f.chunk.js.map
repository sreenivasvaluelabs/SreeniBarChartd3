{"version":3,"sources":["D3Chart.js","ChartWrapper.js","GenderDropdown.js","App.js","serviceWorker.js","index.js"],"names":["MARGIN","WIDTH","HEIGHT","D3Chart","constructor","element","vis","this","svg","d3","append","attr","xLabel","text","xAxisGroup","yAxisGroup","Promise","all","then","datasets","menData","womenData","update","gender","data","y","domain","d","height","range","x","map","name","padding","xAxisCall","transition","duration","call","yAxisCall","rects","selectAll","exit","remove","bandwidth","enter","ChartWrapper","chartArea","useRef","useState","chart","setChart","useEffect","current","className","ref","GenderDropdown","genderSelected","Dropdown","Toggle","variant","id","Menu","Item","onSelect","App","Component","state","setState","render","Navbar","bg","Brand","Container","Row","Col","xs","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oOAEA,MAAMA,EAAgB,GAAhBA,EAA4B,GAA5BA,EAAsC,GAAtCA,EAAiD,GACjDC,EAAQ,IAAMD,EAAcA,EAC5BE,EAAS,IAAMF,EAAaA,EAEnB,MAAMG,EACpBC,YAAYC,GACX,MAAMC,EAAMC,KAEZD,EAAIE,IAAMC,IAAUJ,GAClBK,OAAO,OACNC,KAAK,QAASV,EAAQD,EAAcA,GACpCW,KAAK,SAAUT,EAASF,EAAaA,GACtCU,OAAO,KACNC,KAAK,YALE,oBAKwBX,EALxB,aAKwCA,EALxC,MAOVM,EAAIM,OAASN,EAAIE,IAAIE,OAAO,QAC1BC,KAAK,IAAKV,EAAQ,GAClBU,KAAK,IAAKT,EAAS,IACnBS,KAAK,cAAe,UAEtBL,EAAIE,IAAIE,OAAO,QACbC,KAAK,KAAOT,EAAS,GACrBS,KAAK,KAAM,IACXA,KAAK,cAAe,UACpBE,KAAK,gBACLF,KAAK,YAAa,eAEpBL,EAAIQ,WAAaR,EAAIE,IAAIE,OAAO,KAC9BC,KAAK,YADU,uBACmBT,EADnB,MAGjBI,EAAIS,WAAaT,EAAIE,IAAIE,OAAO,KAEhCM,QAAQC,IAAI,CACXR,IAAQ,0DACRA,IAAQ,8DACNS,KAAMC,IACRb,EAAIc,QAAUD,EAAS,GACvBb,EAAIe,UAAYF,EAAS,GACzBb,EAAIgB,OAAO,SAIbA,OAAOC,GACN,MAAMjB,EAAMC,KAEZD,EAAIkB,KAAmB,QAAXD,EAAoBjB,EAAIc,QAAUd,EAAIe,UAClDf,EAAIM,OAAOC,KAAX,8BAAuCU,IAEvC,MAAME,EAAIhB,MACRiB,OAAO,CAC2B,IAAlCjB,IAAOH,EAAIkB,KAAMG,GAAKA,EAAEC,QACxBnB,IAAOH,EAAIkB,KAAMG,GAAMA,EAAEC,UAEzBC,MAAM,CAAC3B,EAAQ,IAEX4B,EAAIrB,MACRiB,OAAOpB,EAAIkB,KAAKO,IAAIJ,GAAKA,EAAEK,OAC3BH,MAAM,CAAC,EAAG5B,IACVgC,QAAQ,IAEJC,EAAYzB,IAAcqB,GAChCxB,EAAIQ,WAAWqB,aAAaC,SAAS,KAAKC,KAAKH,GAE/C,MAAMI,EAAY7B,IAAYgB,GAC9BnB,EAAIS,WAAWoB,aAAaC,SAAS,KAAKC,KAAKC,GAG/C,MAAMC,EAAQjC,EAAIE,IAAIgC,UAAU,QAC9BhB,KAAKlB,EAAIkB,MAGXe,EAAME,OACJN,aAAaC,SAAS,KACrBzB,KAAK,SAAU,GACfA,KAAK,IAAKT,GACVwC,SAGHH,EAAMJ,aAAaC,SAAS,KAC1BzB,KAAK,IAAKgB,GAAKG,EAAEH,EAAEK,OACnBrB,KAAK,IAAKgB,GAAKF,EAAEE,EAAEC,SACnBjB,KAAK,QAASmB,EAAEa,WAChBhC,KAAK,SAAUgB,GAAKzB,EAASuB,EAAEE,EAAEC,SAGnCW,EAAMK,QAAQlC,OAAO,QACnBC,KAAK,IAAKgB,GAAKG,EAAEH,EAAEK,OACnBrB,KAAK,QAASmB,EAAEa,WAChBhC,KAAK,OAAQ,QACbA,KAAK,IAAKT,GACViC,aAAaC,SAAS,KACrBzB,KAAK,SAAUgB,GAAKzB,EAASuB,EAAEE,EAAEC,SACjCjB,KAAK,IAAKgB,GAAKF,EAAEE,EAAEC,UCvETiB,MAnBM,EAAGtB,aACvB,MAAMuB,EAAYC,iBAAO,MADW,EAEVC,mBAAS,MAFC,mBAE7BC,EAF6B,KAEtBC,EAFsB,KAcpC,OAVAC,oBAAU,KACJF,EAIIA,EAAM7B,SACd6B,EAAM3B,OAAOC,GAJb2B,EAAS,IAAI/C,EAAQ2C,EAAUM,WAM9B,CAACH,EAAO1B,IAGV,yBAAK8B,UAAU,aAAaC,IAAKR,K,QChBpB,SAASS,GAAe,eAAEC,IACxC,OACC,kBAACC,EAAA,EAAD,KACC,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAUC,GAAG,kBAAtC,wBAIA,kBAACH,EAAA,EAASI,KAAV,KACC,kBAACJ,EAAA,EAASK,KAAV,CAAeC,SAAU,IAAMP,EAAe,QAA9C,OACA,kBAACC,EAAA,EAASK,KAAV,CAAeC,SAAU,IAAMP,EAAe,UAA9C,WCJJ,MAAMQ,UAAYC,YAAW,eAAD,oBAC1BC,MAAQ,CACN3C,OAAQ,OAFgB,KAK1BiC,eAAkBjC,GAAWhB,KAAK4D,SAAS,CAAE5C,WAE7C6C,SACE,OACE,yBAAKf,UAAU,OACb,kBAACgB,EAAA,EAAD,CAAQC,GAAG,SACT,kBAACD,EAAA,EAAOE,MAAR,qCAEF,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IAAI,kBAACpB,EAAD,CAAgBC,eAAgBjD,KAAKiD,mBAEpD,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IAAI,kBAAC,EAAD,CAAcpD,OAAQhB,KAAK2D,MAAM3C,cAQ3CyC,QCtBKY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASb,OAAO,kBAAC,EAAD,MAASc,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpE,KAAKqE,IACjCA,EAAaC,iB","file":"static/js/main.5296ec2f.chunk.js","sourcesContent":["import * as d3 from 'd3'\n\nconst MARGIN = { TOP: 10, BOTTOM: 50, LEFT: 70, RIGHT: 10 }\nconst WIDTH = 800 - MARGIN.LEFT - MARGIN.RIGHT;\nconst HEIGHT = 500 - MARGIN.TOP - MARGIN.BOTTOM;\n\nexport default class D3Chart {\n\tconstructor(element) {\n\t\tconst vis = this\n\n\t\tvis.svg = d3.select(element)\n\t\t\t.append(\"svg\")\n\t\t\t\t.attr(\"width\", WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\n\t\t\t\t.attr(\"height\", HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\n\t\t\t.append(\"g\")\n\t\t\t\t.attr(\"transform\", `translate(${MARGIN.LEFT}, ${MARGIN.TOP})`)\n\n\t\tvis.xLabel = vis.svg.append(\"text\")\n\t\t\t.attr(\"x\", WIDTH / 2)\n\t\t\t.attr(\"y\", HEIGHT + 50)\n\t\t\t.attr(\"text-anchor\", \"middle\")\n\n\t\tvis.svg.append(\"text\")\n\t\t\t.attr(\"x\", -(HEIGHT / 2))\n\t\t\t.attr(\"y\", -50)\n\t\t\t.attr(\"text-anchor\", \"middle\")\n\t\t\t.text(\"Height in cm\")\n\t\t\t.attr(\"transform\", \"rotate(-90)\")\n\n\t\tvis.xAxisGroup = vis.svg.append(\"g\")\n\t\t\t.attr(\"transform\", `translate(0, ${HEIGHT})`)\n\n\t\tvis.yAxisGroup = vis.svg.append(\"g\")\n\n\t\tPromise.all([\n\t\t\td3.json(\"https://udemy-react-d3.firebaseio.com/tallest_men.json\"),\n\t\t\td3.json(\"https://udemy-react-d3.firebaseio.com/tallest_women.json\")\n\t\t]).then((datasets) => {\n\t\t\tvis.menData = datasets[0]\n\t\t\tvis.womenData = datasets[1]\n\t\t\tvis.update(\"men\")\n\t\t})\n\t}\n\n\tupdate(gender) {\n\t\tconst vis = this\n\n\t\tvis.data = (gender === \"men\") ? vis.menData : vis.womenData;\n\t\tvis.xLabel.text(`The world's tallest ${gender}`)\n\n\t\tconst y = d3.scaleLinear()\n\t\t\t.domain([\n\t\t\t\td3.min(vis.data, d => d.height) * 0.95, \n\t\t\t\td3.max(vis.data, d =>  d.height)\n\t\t\t])\n\t\t\t.range([HEIGHT, 0])\n\n\t\tconst x = d3.scaleBand()\n\t\t\t.domain(vis.data.map(d => d.name))\n\t\t\t.range([0, WIDTH])\n\t\t\t.padding(0.4)\n\n\t\tconst xAxisCall = d3.axisBottom(x)\n\t\tvis.xAxisGroup.transition().duration(500).call(xAxisCall)\n\n\t\tconst yAxisCall = d3.axisLeft(y)\n\t\tvis.yAxisGroup.transition().duration(500).call(yAxisCall)\n\n\t\t// DATA JOIN\n\t\tconst rects = vis.svg.selectAll(\"rect\")\n\t\t\t.data(vis.data)\n\n\t\t// EXIT\n\t\trects.exit()\n\t\t\t.transition().duration(500)\n\t\t\t\t.attr(\"height\", 0)\n\t\t\t\t.attr(\"y\", HEIGHT)\n\t\t\t\t.remove()\n\n\t\t// UPDATE\n\t\trects.transition().duration(500)\n\t\t\t.attr(\"x\", d => x(d.name))\n\t\t\t.attr(\"y\", d => y(d.height))\n\t\t\t.attr(\"width\", x.bandwidth)\n\t\t\t.attr(\"height\", d => HEIGHT - y(d.height))\n\n\t\t// ENTER\n\t\trects.enter().append(\"rect\")\n\t\t\t.attr(\"x\", d => x(d.name))\n\t\t\t.attr(\"width\", x.bandwidth)\n\t\t\t.attr(\"fill\", \"grey\")\n\t\t\t.attr(\"y\", HEIGHT)\n\t\t\t.transition().duration(500)\n\t\t\t\t.attr(\"height\", d => HEIGHT - y(d.height))\n\t\t\t\t.attr(\"y\", d => y(d.height))\n\t}\n}","\nimport React, { useRef, useState, useEffect } from 'react';\nimport D3Chart from './D3Chart';\n\nconst ChartWrapper = ({ gender }) => {\n\tconst chartArea = useRef(null)\n\tconst [chart, setChart] = useState(null)\n\n\tuseEffect(() => {\n\t\tif (!chart) {\n\t\t\tsetChart(new D3Chart(chartArea.current))\n\t\t}\n\t\t// skip the loading state, when data is still a pending promise\n\t\telse if (chart.menData) {\n\t\t\tchart.update(gender)\n\t\t}\n\t}, [chart, gender])\n\n\treturn (\n\t\t<div className=\"chart-area\" ref={chartArea}></div>\n\t)\n}\n\nexport default ChartWrapper","import React from 'react';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nexport default function GenderDropdown({ genderSelected }) {\n\treturn (\n\t\t<Dropdown>\n\t\t\t<Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n\t\t\t\tPlease select gender\n\t\t\t</Dropdown.Toggle>\n\n\t\t\t<Dropdown.Menu>\n\t\t\t\t<Dropdown.Item onSelect={() => genderSelected(\"men\")}>Men</Dropdown.Item>\n\t\t\t\t<Dropdown.Item onSelect={() => genderSelected(\"women\")}>Women</Dropdown.Item>\n\t\t\t</Dropdown.Menu>\n\t\t</Dropdown>\n\t)\n}","import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport ChartWrapper from './ChartWrapper';\nimport GenderDropdown from './GenderDropdown';\n\nclass App extends Component {\n  state = {\n    gender: \"men\"\n  }\n\n  genderSelected = (gender) => this.setState({ gender })\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar bg=\"light\">\n          <Navbar.Brand>Sreeni BarChart- D3 Example</Navbar.Brand>\n        </Navbar>\n        <Container>\n          <Row>\n            <Col xs={12}><GenderDropdown genderSelected={this.genderSelected} /></Col>\n          </Row>\n          <Row>\n            <Col xs={12}><ChartWrapper gender={this.state.gender} /></Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}